import { Credential, credentialToRewardAddress, Data, getAddressDetails, Script, stringify } from "@lucid-evolution/lucid";
import {
    adminMintingScript,
    adminPkh,
    deployDetailsFile,
    getLucidInstance,
    provNetwork,
    RedeemerType,
    refscriptsScriptHash,
    UnifiedRedeemer,
} from "../index.ts";

const deployed = JSON.parse(
    new TextDecoder().decode(Deno.readFileSync(deployDetailsFile)),
);

// Set manually, in case of error in deploy:
const refscriptsAddr =
    "addr_test1xpz0n40kyvq62d5gfmj23g69dpckrthw5e2ykktxkwwlf3jyl82lvgcp55mgsnhy4z3526r3vxhwafj5fdvkdvua7nrqdc08lm";
const refscriptsCred = getAddressDetails(refscriptsAddr).paymentCredential as Credential;
const refscriptsRewardAddr = credentialToRewardAddress(provNetwork, refscriptsCred);

const oracleScriptAddr =
    "addr_test1xpdxtuc4w0luaxs8g6xxd6yk0p2pylz20f59t600x9lrww6yl82lvgcp55mgsnhy4z3526r3vxhwafj5fdvkdvua7nrqjc26qr";
const oracleCred = getAddressDetails(oracleScriptAddr).paymentCredential as Credential;
const oracleRewardAddr = credentialToRewardAddress(provNetwork, oracleCred);
const oraclePolicyID = "5a65f31573ffce9a07468c66e8967854127c4a7a6855e9ef317e373b";

const lucid = getLucidInstance();

const refUtxos = await lucid.utxosAt(refscriptsAddr);

const oracleRefUtxo = refUtxos.find((utxo) => {
    if (utxo.assets[deployed.refscriptsBcnTokens.oracle]) return true;
    else return false;
})!;
const oracleScript = oracleRefUtxo.scriptRef as Script;
// Set manually, in case of error in deploy:
// const oracleScript: Script = {
//     type: "PlutusV3",
//     script: "590ef00101003229800aba4aba2aba1aba0aab9faab9eaab9dab9a488888889660033001300337540132300730080019180398041804180418041804180418041804000c88c8cc00400400c896600200314a115980099b8f375c601400200714a3133002002300b001401480424600e601060106010003370e90014dd2a400123007300830080019b87480026e1d20049b87480512222222222298009809005cc04402e44660140040032223259800980518089baa0018a40011375a602a60246ea8005010192cc004c028c044dd5000c5300103d87a8000899198008009bab30163013375400444b30010018a6103d87a8000899192cc004cdc8803000c56600266e3c0180062601a66030602c00497ae08a60103d87a80004051133004004301a00340506eb8c050004c05c005015202032330010010042259800800c5300103d87a8000899192cc004cdc8803000c56600266e3c018006260186602e602a00497ae08a60103d87a8000404d1330040043019003404c6eb8c04c004c05800501448896600200514c0103d87a80008acc004c0180062601066026602800497ae08cc00400e602a005337000029000a006403c809244b30013005300f375400513232332259800980c001c0162c80a8dd7180a8009bae30150023015001301037540051640389111114c004c05c01a602e603000d300200291192cc004c030006264646464653001375a603e003375a603e00b375a603e009375a603e00491112cc004c09001626601a604600e017164084301f001301e001301d001301c001301737540071598009807800c4c8c8c8c8c9660026040005132323322598009812001c4c8c8cc89660026050007132323322598009816001c04e2c8148dd698148009bad302900230290013758604e0171640946eb4c094004dd6981280118128009bac30230088b2042375a60420026eb4c084008c084004dd6180f802c5901d1bad301e001301e001301d001301c001301737540071598009805800c4c8c966002603a003132323322598009810801c4c8c8cc8966002604a00700c8b2044375a60440026eb4c088008c088004dd61810002c5901e1bad301e001375a603c004603c0026eb0c07000a2c80d0c070004c05cdd5001c56600266e1d20060018991919192cc004c07c00a264646644b300130230038991919912cc004c09c00e01d1640906eb4c090004dd6981200118120009bac30220078b2040375a60400026eb4c080008c080004dd6180f00245901c1bad301d001301d001301c0013017375400715980099b87480200062646464646644b300130210038991919912cc004c09400e264646644b300130290038084590261bad3026001375a604c004604c0026eb0c0900222c8110dd698110009bad302200230220013758604000b1640786eb4c078004dd6980f002180f000980e800980e000980b9baa0038acc004cdc3a40140031323259800980e80140122c80d0dd6980d800980b9baa0038acc004cdc3a40180031323259800980e80140122c80d0dd6980d800980b9baa0038acc004cdc3a401c0031323259800980e80140122c80d0dd6980d800980b9baa0038acc004cdc3a4020003159800980b9baa003801459018456600266e1d20120018acc004c05cdd5001c00a2c80c22b3001300a0018991919192cc004c07c00a264646644b300130230038991919912cc004c09c00e01d1640906eb4c090004dd6981200118120009bac30220078b2040375a60400026eb4c080008c080004dd6180f00245901c1bae301d001301d001301c0013017375400715980099b8748058006264646644b3001301f00380345901c1bad301c001375a60380046038002602e6ea800e2b30013370e900c000c4c8c8cc8966002603e0070068b2038375a60380026eb4c070008c070004c05cdd5001c59015202a405480a9015202a405480a9015202a405480a9015180a9baa00248888c966002601c003132330030061325980099b87480380062b300132598009808980d9baa001899baf301f301c3754603e60386ea8004c048c070dd5011c5901a198029bac301e301b37540186eb4c078c06cdd5003c4c04e60026eacc078c07cc07cc07cc07cc06cdd5006400a6eb8c050c06cdd501120148a50406515980099b87480400062660166eb0c058c06cdd50061bae3017301b375404515980099b87480480062660166eb0c058c06cdd50061bae3017301b375404516406480c9019180c9baa006375c603860326ea801226464b300130130038991991198038050992cc004c04800626464b30013016302037540031332259800980c18111baa00189919199119801001000912cc00400629422b30013375e006604c605400314a3133002002302b00140948140dd5981418149814981498149814981498129baa0165980099baf0083027302437540071302730243754604e60486ea8c080c090dd5001c56600266ebc020c09cc090dd5000c4c09cc090dd5181398121baa3020302437540031640888110c098c08cdd5000c59021181218109baa0013300b3758604860426ea8048dd698121bac302430250028b203e3300a3758604660406ea8044dd698119bac3023001301f375401713259800980c00144c8c8cc8966002603260466ea80062b30013300a3027302800230270028992cc004c074c090dd5000c4cdc79bae3028302537540026eb8c0a0c094dd501645282046302730243754604e60486ea8c080c090dd5181398121baa0018a50408916408930010139bad30250019bad301e00180320063300c3758604a60446ea804cdd698129bac3025302600237586048002604860406ea80322b30013370e900400144c8c8cc8966002603260466ea80062b30013300a3027302800230270028992cc004c074c090dd5000c4cdc79bae3028302537540026eb8c0a0c094dd501645282046302730243754604e60486ea8c080c090dd5181398121baa0018a50408916408930010139bad30250019bad301e00180320063300c3758604a60446ea804cdd698129bac3025302600237586048002604860406ea80322b30013370e900b00144c8c8c966002603730013756603e60466ea8c07cc08cdd5000cc966002603860466ea800626eb8c09cc090dd5000c59022181318119baa302630233754603e60466ea80066eb8c070c08cdd501520248acc004c96600330013756604060486ea8006604060486ea8c080c090dd5001488cdc48008012016899baf302730243754002604e60486ea8c080c090dd500145282044302630270028998099bac301e302337540286eb8c07cc08cdd5015452820428a504084604a00330010129bad30240019bad30243025001802a0043020375401916407880f101e1111192cc004c064c08cdd5000c4cc89660026036604a6ea80062b30013375e6052604c6ea8008012266050004660506052604c6ea80052f5c1164091164090604e60486ea8004cc038dd6180d18121baa0050038b20443300d3758604c60466ea801000d01d180e9baa00a301f001301f3020001301b375400d1598009807801c4c8cc014020566002601e60366ea80222646645300137586044005375c604460460053300937586044603e6ea8040dd69811000a444b30013017302137540031332259800980c98119baa00189919912cc004c070c098dd5000c4cc8966002603c60506ea800626464b3001301f302a37540031323322330020011332259800981218179baa001899198028008acc0040322b300100a8acc00400e2b30013302b59800981498181baa00189bac3034303137540031640bc0231330213758605860626ea8088046294102f4528205e8a5040bd14a08178c0ccc0c0dd5000c5902e2cc004cdd7981898171baa3031302e375400a027159800cc004dd5981518171baa005981518171baa302a302e3754019223371200200480aa2b30013023302d375400314a314a08162294102c452820583024302e37546054605c6ea802888c9660026048003132323232323298009bac30380019bad30380069bad3038005981c001cdd6181c001244444b3001303e006899813981e80489981380109919912cc004c10400e26602401044b300100280944c8c008c11000cdd7182100120808b207c375a607c0026eb4c0f8008c0f80062c81d86070002606e002606c002606a0026068002605e6ea800e2b300130270018992cc004c0d000626600a6eb0c0cc00489660020050058991801181b8019bae303500240cd1640c4605e6ea800e2c816902d18169baa002302f302c3754004446466002002006446600600260040051640a4604060546ea8004c0b0c0a4dd5000c5902719806981518139baa001003330113758603a604e6ea8060dd69811804c590252cc004cdd7981418129baa3028302537546042604a6ea800c02a266ebcc0a0c094dd5181418129baa30213025375400201514a08118cc03cdd6180d98129baa016375a604200c604e60486ea80062c8110c094c088dd5000998061bac3025302237540266eb4c09400e2c810060420026eb0c080004c070dd500445901a180f180d9baa0068b2032406444b300198009bab3018301c37540053018301c3754603060386ea80064466e24004009003456600266ebcc048c070dd50011809180e1baa3018301c375400313375e603e60386ea8008c07cc070dd5180c180e1baa0018a50406914a080d08896600200514a11329800992cc004c04cc074dd5000c4dd6980f18109bab3021301e375400314800101c1810000cdd798101810800cdd5801a444b30010018acc004c00801a26600a00690004528203c8992cc004cdd79810000a6010140008acc004cc018010dd6981098121bab3021001898019ba630250028a50407d1598009980300224001130030078a50407c80f8c08c0050210ca60020030049119810801198109ba60014bd7020022225980080144cc005300103d87a80004bd6f7b63044ca60026eb8c07c0066eacc08000660480069112cc004cdc8a441000038acc004cdc7a44100003899802980d198129ba60024bd70000c4cc015300103d87a8000006408519800803c006446600e0046604e66ec0dd48029ba6004001401c810860440048102294229422941021202e30173754006229344d959001130016cd8799f581ccf25229ed35ed2f210f48b0c59f1ee0c83e864a8d2490d0190490763581cf7e31550df687890fc14d52f85050356e875d2dacd73c53491ca8531d8799f582018561b6cf1b5889e6baa218bd40afd0002de7000a30382afcce96fcefa18e2ac00ff444f434647ff0001",
// };

/**
 * Tx 1: Burn the oracle settings and price beacon tokens and remove the oracle utxos.
 *
 * This needs to be done before removing the reference utxos from the refscripts contract
 * so that the oracle reference script can still be used.
 */
const oracleUtxos = await lucid.utxosAt(oracleScriptAddr);
const oracleBcnsToBurn = oracleUtxos.reduce((accum: { [asset: string]: bigint }, utxo) => {
    for (const [token, _amt] of Object.entries(utxo.assets)) {
        if (token.startsWith(oraclePolicyID)) {
            accum[token] = -1n;
        }
    }
    return accum;
}, {});
const oracleCfgBurnObj: UnifiedRedeemer = RedeemerType.BurnOracleToken;
const oracleCfgBurnRedeemer = Data.to(oracleCfgBurnObj, UnifiedRedeemer);
const [newWalletInputs1, _derivedOutputs1, tx1] = await lucid
    .newTx()
    .mintAssets(oracleBcnsToBurn, oracleCfgBurnRedeemer)
    .collectFrom(oracleUtxos, oracleCfgBurnRedeemer)
    .readFrom([oracleRefUtxo])
    // .attach.Script(oracleScript)
    .addSignerKey(adminPkh)
    .chain();
console.log(`Oracle beacon tokens burn tx built`);
console.log("");
const signedTx1 = await tx1.sign.withWallet().complete();
console.log(`signedTx1: ${stringify(signedTx1)}`);
console.log(`signedTx1 hash: ${signedTx1.toHash()}`);
console.log(`size: ~${signedTx1.toCBOR().length / 2048} KB`);
console.log("");
console.log("");
const tx1Json = JSON.parse(stringify(signedTx1));
console.log(`txFee: ${parseInt(tx1Json.body.fee) / 1_000_000} ADA`);
console.log("");
const tx1Hash = await signedTx1.submit();
console.log(`tx1 submitted. Hash: ${tx1Hash}`);
console.log("");

/**
 * Tx 2: Undeploy refscripts - burn the refscripts beacon tokens, remove the refscripts utxos,
 * and de-register the stake accts for `refscripts` and `oracle` contracts.
 */
lucid.overrideUTxOs(newWalletInputs1);

const refscriptsRefUtxo = refUtxos.find((utxo) => {
    if (utxo.assets[deployed.refscriptsBcnTokens.refscripts]) return true;
    else return false;
})!;
const refScript = refscriptsRefUtxo.scriptRef as Script;

console.log(`refscriptsAddr: ${refscriptsAddr}`);
console.log(`refscriptsRewardAddr: ${refscriptsRewardAddr}`);
console.log(`refscriptsCred: ${stringify(refscriptsCred)}`);
console.log(`refscriptsScriptHash: ${refscriptsScriptHash}`);
console.log("");
console.log(`refUtxos count: ${refUtxos.length}`);
console.log("");

const refscriptBcnsToBurn = refUtxos.reduce((accum: { [asset: string]: bigint }, utxo) => {
    for (const [token, _amt] of Object.entries(utxo.assets)) {
        if (token.startsWith(deployed.adminTokensPolicyId)) {
            accum[token] = -1n;
        }
    }
    return accum;
}, {});
const tx2 = await lucid
    .newTx()
    .mintAssets(refscriptBcnsToBurn)
    .collectFrom(refUtxos, Data.void())
    .deregister.Stake(refscriptsRewardAddr, Data.void())
    .deregister.Stake(oracleRewardAddr, oracleCfgBurnRedeemer)
    .withdraw(refscriptsRewardAddr, 0n, Data.void())
    .addSignerKey(adminPkh)
    .attach.Script(refScript)
    .attach.Script(oracleScript)
    .attach.Script(adminMintingScript)
    .complete();

const signedTx2 = await tx2.sign.withWallet().complete();
console.log(`signedTx2: ${stringify(signedTx2)}`);
console.log(`signedTx2 hash: ${signedTx2.toHash()}`);
console.log(`size: ~${signedTx2.toCBOR().length / 2048} KB`);
console.log("");
const tx2Json = JSON.parse(stringify(signedTx2));
console.log(`txFee: ${parseInt(tx2Json.body.fee) / 1_000_000} ADA`);
console.log("");
const tx2Hash = await signedTx2.submit();
console.log(`tx2 submitted. Hash: ${tx2Hash}`);
console.log("");
